{"version":3,"sources":["arrow-down.svg","arrow-up.svg","App.js","reportWebVitals.js","index.js"],"names":["TimerSetup","props","id","className","name","down","onClick","clickedUp","src","arrowDown","alt","countID","count","up","clickedDown","arrowUp","Clock","counter","seconds","Title","Session","Button","clicked","App","useState","breakLength","setBreakLength","sessionLength","setSessionLength","setSeconds","minutes","setMinutes","sessionName","setSessionName","endTime","setEndTime","timerOn","setTimerOn","beep","useRef","useEffect","setInterval","remaining","getRemaining","clearInterval","switchTo","nSeconds","nMinutes","updateEndTime","arrow","document","querySelectorAll","button","querySelector","forEach","item","disabled","Date","getTime","Math","floor","time","ref","current","play","setTimeout","console","log","duration","handleArrowClicked","e","currentTarget","setSessionTimers","newLength","currentTime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.40984be1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/arrow-down.94a90b72.svg\";","export default __webpack_public_path__ + \"static/media/arrow-up.080e6de1.svg\";","import React, {useState, useEffect, useRef} from 'react';\nimport arrowDown from './arrow-down.svg';\nimport arrowUp from './arrow-up.svg';\n\n\nfunction App() {\n  const [breakLength, setBreakLength] = useState(5);\n  const [sessionLength, setSessionLength] = useState(25);\n\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(sessionLength);\n\n  const [sessionName, setSessionName] = useState(\"Session\");\n  const [endTime, setEndTime] = useState(null);\n\n\n  const [timerOn, setTimerOn] = useState(false);\n\n  const beep = useRef(null)\n\n  useEffect(()=>{\n    let id;\n\n    if(timerOn){\n      \n      id = setInterval(()=>{\n        //console.log(\"in interval\" +endTime);\n        let remaining = getRemaining();\n        //console.log(sessionName + \" - \" + remaining.nMinutes + \" : \" + remaining.nSeconds );\n\n        if(remaining.remaining < 0){\n          clearInterval(id);\n          if(sessionName===\"Session\"){\n            switchTo(\"Break\");\n            \n          }\n          else{\n            switchTo(\"Session\");\n            \n          }\n          \n        }\n        else{\n        \n          setSeconds(remaining.nSeconds);\n          setMinutes(remaining.nMinutes);\n          /*if(seconds === 0){\n            setSeconds(\"59\");\n            setMinutes(minutes-1);\n            \n          }\n          else if (seconds === 10){\n            \n            let secTemp = seconds-1;\n            setSeconds(secTemp);\n          }\n          else{\n            \n            setSeconds(seconds-1);\n          }*/\n          \n        }\n        if(!timerOn){\n          clearInterval(id);\n        }\n        \n      }, 1000);\n    }\n    return () => clearInterval(id);\n  },[timerOn, seconds, minutes, endTime]);\n  \n  useEffect(()=>{\n    updateEndTime();\n    return;\n  },[sessionName])\n\n  useEffect(()=>{\n    const arrow = document.querySelectorAll(\".arrow\");\n    const button = document.querySelector(\"#reset\");\n    \n    //get arrow buttons\n    //get reset button\n    //diable/enable the buttons\n    if(timerOn){\n      arrow.forEach((item) => {\n        item.disabled = true;\n        //console.log(item);\n      });\n      \n    }\n    else{\n      arrow.forEach((item) => {\n        item.disabled = false;\n      });\n      button.disabled = false;\n    }\n    //console.log(button)\n  },[timerOn])\n\n\n  const getRemaining = () => {\n    const remaining = endTime - new Date().getTime();\n    let nSeconds = Math.floor((remaining/1000) % 60);\n    let nMinutes = Math.floor((remaining/1000)/60 % 60)\n\n    return{\n      remaining,\n      nSeconds,\n      nMinutes\n    }\n  }\n\n  const updateEndTime = () => {\n    //console.log(\"update called \" + minutes + \" \" + seconds);\n    let time = new Date().getTime() + (minutes*60000) + ((seconds+1) * 1000);\n    let s = Math.floor((time/1000) % 60);\n    let m = Math.floor((time/1000)/60 % 60)\n    //console.log(m + \" : \" + s);\n    setEndTime(time);\n    \n  }\n  \n  const switchTo = (ref) => {\n    beep.current.play();\n    setTimeout(() => {\n      if(ref === \"Session\"){\n        console.log(\"switching to session \" + sessionLength);\n\n        setSeconds(0);\n        setMinutes(sessionLength);\n        setSessionName(ref);\n        \n      }\n      else if (ref === \"Break\"){\n        console.log(\"switching to break\" + breakLength);\n\n        setSeconds(0);\n        setMinutes(breakLength);\n        setSessionName(ref);\n        \n      }      \n    }, beep.current.duration*1000);\n  } \n  const handleArrowClicked = (e) =>{\n    if(!timerOn){\n      let target = e.currentTarget;\n      \n      switch(target.id){\n        case \"session-increment\":\n          sessionLength < 60 ? setSessionTimers(sessionLength+1): console.log(\"bruh\");\n          break;\n        \n        case \"session-decrement\":\n          sessionLength > 1 ? setSessionTimers(sessionLength-1): console.log(\"bruh2\");\n          break;\n  \n        case \"break-increment\":\n          breakLength < 60 ? setBreakLength(breakLength+1) : console.log(\"bbruh3\");\n          break;\n  \n        case \"break-decrement\":\n          breakLength > 1 ? setBreakLength(breakLength-1) : console.log(\"bbbruh4\");\n          break;\n\n          \n        }\n        if(sessionName===\"Break\" || seconds!= 0){\n          switchTo(\"Session\");\n        }\n    }\n  }\n\n  const setSessionTimers = (newLength) => {\n    setSessionLength(newLength);\n    setMinutes(newLength);\n  }\n\n\n  const handlePPClicked = () => {\n    console.log(\"play clicked:\" + timerOn);\n     \n\n    setTimerOn(!timerOn);\n    if(!timerOn){\n      updateEndTime();\n    }\n  }\n\n  \n\n \n\n  const handleResetClicked = () => {\n    setTimerOn(false);\n    setSessionName(\"Session\");\n    setSessionLength(25);\n    setBreakLength(5);\n    setMinutes(25);\n    setSeconds(0);\n\n    const sound = document.querySelector(\"#beep\");\n  \n    sound.currentTime = 0;\n  }\n  \n  const checkSec = () => {\n    \n    if(seconds < 10){\n      return \"0\"+seconds;\n    }\n    else{\n      return seconds;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Title name=\"Tomato Timer\" />\n      <Session name={sessionName} />\n      <div id=\"timer-wrapper\">\n        <TimerSetup id=\"session-label\" countID=\"session-length\" count={sessionLength} name=\"Session Length\" up=\"session-increment\" down=\"session-decrement\" clickedUp={handleArrowClicked} clickedDown={handleArrowClicked}/>\n        <TimerSetup id=\"break-label\" countID=\"break-length\" count={breakLength} name=\"Break Length\" up=\"break-increment\" down=\"break-decrement\" clickedUp={handleArrowClicked} clickedDown={handleArrowClicked}/>\n      </div>\n      <Clock counter={minutes} seconds={checkSec()}/>\n\n      <div id=\"button-wrapper\">\n        <Button name=\"Play/Pause\" id=\"start_stop\" clicked={handlePPClicked}/>\n        <Button name=\"Reset\" id=\"reset\" clicked={handleResetClicked}/>\n      </div>\n      <audio\n      id=\"beep\"\n      ref={beep}\n      src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"></audio>\n\n    </div>\n  );\n}\n\n\nfunction TimerSetup(props){\n  return(\n    <div id={props.id}>\n      <p className=\"timer-title\">{props.name}</p>\n      <div id=\"wrapper\">\n        <button id={props.down} className=\"arrow\" onClick={props.clickedUp}>\n          <img src={arrowDown} alt=\"arrow-down\" />\n        </button>\n        <div id={props.countID} className=\"count\">\n          {props.count}\n        </div>\n        <button id={props.up} className=\"arrow\" onClick={props.clickedDown}>\n          <img src={arrowUp} alt=\"arrow-up\"/>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction Clock(props){\n  return(\n    <div id=\"time-left\" className=\"count\">\n      {props.counter}:{props.seconds}\n    </div>\n  )\n}\n\nconst Title = (props) => {\n  return(\n    <div className=\"title\">\n      {props.name}\n    </div>\n  );\n}\n\nconst Session = (props) => {\n  return(\n    <div id=\"timer-label\" className=\"session\">\n      {props.name}\n    </div>\n  );\n}\n\nconst Button = (props) => {\n  return(\n    <button id={props.id} onClick={props.clicked}>\n      {props.name}\n    </button>\n  )\n}\n\n\nexport default App;\n\n/*\n\nlet time \n\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}